// Code generated by protoc-gen-go. DO NOT EDIT.
// source: scache/common.proto

package scache

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Mutation int32

const (
	Mutation_NONE   Mutation = 0
	Mutation_ADD    Mutation = 1
	Mutation_REMOVE Mutation = 2
)

var Mutation_name = map[int32]string{
	0: "NONE",
	1: "ADD",
	2: "REMOVE",
}
var Mutation_value = map[string]int32{
	"NONE":   0,
	"ADD":    1,
	"REMOVE": 2,
}

func (x Mutation) String() string {
	return proto.EnumName(Mutation_name, int32(x))
}
func (Mutation) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

type ByteRange struct {
	Low  int64 `protobuf:"varint,1,opt,name=low" json:"low,omitempty"`
	High int64 `protobuf:"varint,2,opt,name=high" json:"high,omitempty"`
}

func (m *ByteRange) Reset()                    { *m = ByteRange{} }
func (m *ByteRange) String() string            { return proto.CompactTextString(m) }
func (*ByteRange) ProtoMessage()               {}
func (*ByteRange) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *ByteRange) GetLow() int64 {
	if m != nil {
		return m.Low
	}
	return 0
}

func (m *ByteRange) GetHigh() int64 {
	if m != nil {
		return m.High
	}
	return 0
}

type SourceMetadata struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *SourceMetadata) Reset()                    { *m = SourceMetadata{} }
func (m *SourceMetadata) String() string            { return proto.CompactTextString(m) }
func (*SourceMetadata) ProtoMessage()               {}
func (*SourceMetadata) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *SourceMetadata) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Source struct {
	SourceType string `protobuf:"bytes,1,opt,name=source_type,json=sourceType" json:"source_type,omitempty"`
	Link       string `protobuf:"bytes,2,opt,name=link" json:"link,omitempty"`
	// Set by server after discovery.
	Metadata *SourceMetadata `protobuf:"bytes,3,opt,name=metadata" json:"metadata,omitempty"`
}

func (m *Source) Reset()                    { *m = Source{} }
func (m *Source) String() string            { return proto.CompactTextString(m) }
func (*Source) ProtoMessage()               {}
func (*Source) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *Source) GetSourceType() string {
	if m != nil {
		return m.SourceType
	}
	return ""
}

func (m *Source) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *Source) GetMetadata() *SourceMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type BlobMetadata struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *BlobMetadata) Reset()                    { *m = BlobMetadata{} }
func (m *BlobMetadata) String() string            { return proto.CompactTextString(m) }
func (*BlobMetadata) ProtoMessage()               {}
func (*BlobMetadata) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *BlobMetadata) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Blob struct {
	SourceType string        `protobuf:"bytes,1,opt,name=source_type,json=sourceType" json:"source_type,omitempty"`
	Link       string        `protobuf:"bytes,2,opt,name=link" json:"link,omitempty"`
	BlobId     string        `protobuf:"bytes,3,opt,name=blob_id,json=blobId" json:"blob_id,omitempty"`
	Length     int64         `protobuf:"varint,4,opt,name=length" json:"length,omitempty"`
	Range      []*ByteRange  `protobuf:"bytes,5,rep,name=range" json:"range,omitempty"`
	Metadata   *BlobMetadata `protobuf:"bytes,6,opt,name=metadata" json:"metadata,omitempty"`
}

func (m *Blob) Reset()                    { *m = Blob{} }
func (m *Blob) String() string            { return proto.CompactTextString(m) }
func (*Blob) ProtoMessage()               {}
func (*Blob) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

func (m *Blob) GetSourceType() string {
	if m != nil {
		return m.SourceType
	}
	return ""
}

func (m *Blob) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *Blob) GetBlobId() string {
	if m != nil {
		return m.BlobId
	}
	return ""
}

func (m *Blob) GetLength() int64 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *Blob) GetRange() []*ByteRange {
	if m != nil {
		return m.Range
	}
	return nil
}

func (m *Blob) GetMetadata() *BlobMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func init() {
	proto.RegisterType((*ByteRange)(nil), "scache.ByteRange")
	proto.RegisterType((*SourceMetadata)(nil), "scache.SourceMetadata")
	proto.RegisterType((*Source)(nil), "scache.Source")
	proto.RegisterType((*BlobMetadata)(nil), "scache.BlobMetadata")
	proto.RegisterType((*Blob)(nil), "scache.Blob")
	proto.RegisterEnum("scache.Mutation", Mutation_name, Mutation_value)
}

func init() { proto.RegisterFile("scache/common.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 312 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0xc1, 0x4e, 0xc2, 0x40,
	0x10, 0x86, 0x2d, 0x2d, 0x0b, 0x1d, 0x8c, 0xa9, 0xa3, 0xc1, 0xde, 0x24, 0x8d, 0x89, 0xe8, 0x01,
	0x15, 0x9f, 0x40, 0x02, 0x07, 0x0f, 0x40, 0xb2, 0x1a, 0xaf, 0x64, 0x5b, 0x36, 0x6d, 0x63, 0xbb,
	0x5b, 0xcb, 0x12, 0xd3, 0x27, 0xf4, 0xb5, 0xcc, 0x6e, 0xa1, 0xe2, 0xc5, 0x83, 0xb7, 0x7f, 0xa6,
	0xdf, 0x74, 0xfe, 0x7f, 0x16, 0xce, 0x36, 0x11, 0x8b, 0x12, 0x7e, 0x17, 0xc9, 0x3c, 0x97, 0x62,
	0x54, 0x94, 0x52, 0x49, 0x24, 0x75, 0x33, 0x78, 0x00, 0x77, 0x52, 0x29, 0x4e, 0x99, 0x88, 0x39,
	0x7a, 0x60, 0x67, 0xf2, 0xd3, 0xb7, 0x06, 0xd6, 0xd0, 0xa6, 0x5a, 0x22, 0x82, 0x93, 0xa4, 0x71,
	0xe2, 0xb7, 0x4c, 0xcb, 0xe8, 0xe0, 0x0a, 0x4e, 0x5e, 0xe4, 0xb6, 0x8c, 0xf8, 0x9c, 0x2b, 0xb6,
	0x66, 0x8a, 0x69, 0x4a, 0xb0, 0x9c, 0x9b, 0x41, 0x97, 0x1a, 0x1d, 0x7c, 0x00, 0xa9, 0x29, 0xbc,
	0x84, 0xde, 0xc6, 0xa8, 0x95, 0xaa, 0x8a, 0x3d, 0x04, 0x75, 0xeb, 0xb5, 0x2a, 0xb8, 0x1e, 0xcf,
	0x52, 0xf1, 0x6e, 0x96, 0xb8, 0xd4, 0x68, 0x1c, 0x43, 0x37, 0xdf, 0xfd, 0xde, 0xb7, 0x07, 0xd6,
	0xb0, 0x37, 0xee, 0x8f, 0x6a, 0xcb, 0xa3, 0xdf, 0xcb, 0x69, 0xc3, 0x05, 0x01, 0x1c, 0x4f, 0x32,
	0x19, 0xfe, 0x69, 0xeb, 0xcb, 0x02, 0x47, 0x43, 0xff, 0x73, 0x75, 0x01, 0x9d, 0x30, 0x93, 0xe1,
	0x2a, 0x5d, 0x1b, 0x53, 0x2e, 0x25, 0xba, 0x7c, 0x5e, 0x63, 0x1f, 0x48, 0xc6, 0x45, 0xac, 0x12,
	0xdf, 0x31, 0x97, 0xda, 0x55, 0x78, 0x0d, 0xed, 0x52, 0x9f, 0xd6, 0x6f, 0x0f, 0xec, 0x61, 0x6f,
	0x7c, 0xba, 0xcf, 0xd0, 0xdc, 0x9c, 0xd6, 0xdf, 0xf1, 0xfe, 0x20, 0x2f, 0x31, 0x79, 0xcf, 0x1b,
	0xf6, 0x20, 0xd3, 0x4f, 0xda, 0xdb, 0x1b, 0xe8, 0xce, 0xb7, 0x8a, 0xa9, 0x54, 0x0a, 0xec, 0x82,
	0xb3, 0x58, 0x2e, 0x66, 0xde, 0x11, 0x76, 0xc0, 0x7e, 0x9a, 0x4e, 0x3d, 0x0b, 0x01, 0x08, 0x9d,
	0xcd, 0x97, 0x6f, 0x33, 0xaf, 0x15, 0x12, 0xf3, 0xe6, 0x8f, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff,
	0xd9, 0x87, 0xb3, 0x38, 0x0a, 0x02, 0x00, 0x00,
}
