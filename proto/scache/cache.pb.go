// Code generated by protoc-gen-go. DO NOT EDIT.
// source: scache/cache.proto

/*
Package scache is a generated protocol buffer package.

It is generated from these files:
	scache/cache.proto
	scache/provider.proto
	scache/registry.proto
	scache/common.proto

It has these top-level messages:
	AddSourceRequest
	AddSourceResponse
	RemoveSourceRequest
	RemoveSourceResponse
	FilterExpression
	ListSourcesRequest
	SourceList
	ListBlobsRequest
	BlobList
	SupportsTypeResponse
	DiscoveryInfo
	ChunkRequest
	Chunk
	ProviderAddress
	ProviderSpec
	AddProviderResponse
	RemoveProviderResponse
	ListProvidersRequest
	ListProvidersResponse
	ByteRange
	SourceMetadata
	Source
	BlobMetadata
	Blob
*/
package scache

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AddSourceRequest struct {
	// Link without metadata.
	Skinny *Source `protobuf:"bytes,1,opt,name=skinny" json:"skinny,omitempty"`
}

func (m *AddSourceRequest) Reset()                    { *m = AddSourceRequest{} }
func (m *AddSourceRequest) String() string            { return proto.CompactTextString(m) }
func (*AddSourceRequest) ProtoMessage()               {}
func (*AddSourceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AddSourceRequest) GetSkinny() *Source {
	if m != nil {
		return m.Skinny
	}
	return nil
}

type AddSourceResponse struct {
	// Link with metadata.
	Source *Source `protobuf:"bytes,1,opt,name=source" json:"source,omitempty"`
}

func (m *AddSourceResponse) Reset()                    { *m = AddSourceResponse{} }
func (m *AddSourceResponse) String() string            { return proto.CompactTextString(m) }
func (*AddSourceResponse) ProtoMessage()               {}
func (*AddSourceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AddSourceResponse) GetSource() *Source {
	if m != nil {
		return m.Source
	}
	return nil
}

type RemoveSourceRequest struct {
	Source *Source `protobuf:"bytes,1,opt,name=source" json:"source,omitempty"`
}

func (m *RemoveSourceRequest) Reset()                    { *m = RemoveSourceRequest{} }
func (m *RemoveSourceRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoveSourceRequest) ProtoMessage()               {}
func (*RemoveSourceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RemoveSourceRequest) GetSource() *Source {
	if m != nil {
		return m.Source
	}
	return nil
}

type RemoveSourceResponse struct {
}

func (m *RemoveSourceResponse) Reset()                    { *m = RemoveSourceResponse{} }
func (m *RemoveSourceResponse) String() string            { return proto.CompactTextString(m) }
func (*RemoveSourceResponse) ProtoMessage()               {}
func (*RemoveSourceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type FilterExpression struct {
	// OR terms. Empty means "any".
	Term          []*FilterExpression_Term `protobuf:"bytes,1,rep,name=term" json:"term,omitempty"`
	ExistingItems bool                     `protobuf:"varint,3,opt,name=existing_items,json=existingItems" json:"existing_items,omitempty"`
}

func (m *FilterExpression) Reset()                    { *m = FilterExpression{} }
func (m *FilterExpression) String() string            { return proto.CompactTextString(m) }
func (*FilterExpression) ProtoMessage()               {}
func (*FilterExpression) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *FilterExpression) GetTerm() []*FilterExpression_Term {
	if m != nil {
		return m.Term
	}
	return nil
}

func (m *FilterExpression) GetExistingItems() bool {
	if m != nil {
		return m.ExistingItems
	}
	return false
}

// If link is set, source_type must be set, etc.
// Field not set implies "any".
type FilterExpression_Term struct {
	SourceType string `protobuf:"bytes,1,opt,name=source_type,json=sourceType" json:"source_type,omitempty"`
	Link       string `protobuf:"bytes,2,opt,name=link" json:"link,omitempty"`
	BlobId     string `protobuf:"bytes,3,opt,name=blob_id,json=blobId" json:"blob_id,omitempty"`
}

func (m *FilterExpression_Term) Reset()                    { *m = FilterExpression_Term{} }
func (m *FilterExpression_Term) String() string            { return proto.CompactTextString(m) }
func (*FilterExpression_Term) ProtoMessage()               {}
func (*FilterExpression_Term) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 0} }

func (m *FilterExpression_Term) GetSourceType() string {
	if m != nil {
		return m.SourceType
	}
	return ""
}

func (m *FilterExpression_Term) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *FilterExpression_Term) GetBlobId() string {
	if m != nil {
		return m.BlobId
	}
	return ""
}

type ListSourcesRequest struct {
	Filter *FilterExpression `protobuf:"bytes,1,opt,name=filter" json:"filter,omitempty"`
}

func (m *ListSourcesRequest) Reset()                    { *m = ListSourcesRequest{} }
func (m *ListSourcesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListSourcesRequest) ProtoMessage()               {}
func (*ListSourcesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ListSourcesRequest) GetFilter() *FilterExpression {
	if m != nil {
		return m.Filter
	}
	return nil
}

type SourceList struct {
	Source   []*Source `protobuf:"bytes,1,rep,name=source" json:"source,omitempty"`
	Mutation Mutation  `protobuf:"varint,2,opt,name=mutation,enum=scache.Mutation" json:"mutation,omitempty"`
}

func (m *SourceList) Reset()                    { *m = SourceList{} }
func (m *SourceList) String() string            { return proto.CompactTextString(m) }
func (*SourceList) ProtoMessage()               {}
func (*SourceList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *SourceList) GetSource() []*Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *SourceList) GetMutation() Mutation {
	if m != nil {
		return m.Mutation
	}
	return Mutation_NONE
}

type ListBlobsRequest struct {
	Filter *FilterExpression `protobuf:"bytes,1,opt,name=filter" json:"filter,omitempty"`
}

func (m *ListBlobsRequest) Reset()                    { *m = ListBlobsRequest{} }
func (m *ListBlobsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListBlobsRequest) ProtoMessage()               {}
func (*ListBlobsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ListBlobsRequest) GetFilter() *FilterExpression {
	if m != nil {
		return m.Filter
	}
	return nil
}

type BlobList struct {
	Blob     []*Blob  `protobuf:"bytes,1,rep,name=blob" json:"blob,omitempty"`
	Mutation Mutation `protobuf:"varint,2,opt,name=mutation,enum=scache.Mutation" json:"mutation,omitempty"`
}

func (m *BlobList) Reset()                    { *m = BlobList{} }
func (m *BlobList) String() string            { return proto.CompactTextString(m) }
func (*BlobList) ProtoMessage()               {}
func (*BlobList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *BlobList) GetBlob() []*Blob {
	if m != nil {
		return m.Blob
	}
	return nil
}

func (m *BlobList) GetMutation() Mutation {
	if m != nil {
		return m.Mutation
	}
	return Mutation_NONE
}

func init() {
	proto.RegisterType((*AddSourceRequest)(nil), "scache.AddSourceRequest")
	proto.RegisterType((*AddSourceResponse)(nil), "scache.AddSourceResponse")
	proto.RegisterType((*RemoveSourceRequest)(nil), "scache.RemoveSourceRequest")
	proto.RegisterType((*RemoveSourceResponse)(nil), "scache.RemoveSourceResponse")
	proto.RegisterType((*FilterExpression)(nil), "scache.FilterExpression")
	proto.RegisterType((*FilterExpression_Term)(nil), "scache.FilterExpression.Term")
	proto.RegisterType((*ListSourcesRequest)(nil), "scache.ListSourcesRequest")
	proto.RegisterType((*SourceList)(nil), "scache.SourceList")
	proto.RegisterType((*ListBlobsRequest)(nil), "scache.ListBlobsRequest")
	proto.RegisterType((*BlobList)(nil), "scache.BlobList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Cache service

type CacheClient interface {
	AddSource(ctx context.Context, in *AddSourceRequest, opts ...grpc.CallOption) (*AddSourceResponse, error)
	RemoveSource(ctx context.Context, in *RemoveSourceRequest, opts ...grpc.CallOption) (*RemoveSourceResponse, error)
	ListSources(ctx context.Context, in *ListSourcesRequest, opts ...grpc.CallOption) (*SourceList, error)
	ObserveSources(ctx context.Context, in *ListSourcesRequest, opts ...grpc.CallOption) (Cache_ObserveSourcesClient, error)
	ListBlobs(ctx context.Context, in *ListBlobsRequest, opts ...grpc.CallOption) (*BlobList, error)
	ObserveBlobs(ctx context.Context, in *ListBlobsRequest, opts ...grpc.CallOption) (Cache_ObserveBlobsClient, error)
}

type cacheClient struct {
	cc *grpc.ClientConn
}

func NewCacheClient(cc *grpc.ClientConn) CacheClient {
	return &cacheClient{cc}
}

func (c *cacheClient) AddSource(ctx context.Context, in *AddSourceRequest, opts ...grpc.CallOption) (*AddSourceResponse, error) {
	out := new(AddSourceResponse)
	err := grpc.Invoke(ctx, "/scache.Cache/AddSource", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) RemoveSource(ctx context.Context, in *RemoveSourceRequest, opts ...grpc.CallOption) (*RemoveSourceResponse, error) {
	out := new(RemoveSourceResponse)
	err := grpc.Invoke(ctx, "/scache.Cache/RemoveSource", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) ListSources(ctx context.Context, in *ListSourcesRequest, opts ...grpc.CallOption) (*SourceList, error) {
	out := new(SourceList)
	err := grpc.Invoke(ctx, "/scache.Cache/ListSources", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) ObserveSources(ctx context.Context, in *ListSourcesRequest, opts ...grpc.CallOption) (Cache_ObserveSourcesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Cache_serviceDesc.Streams[0], c.cc, "/scache.Cache/ObserveSources", opts...)
	if err != nil {
		return nil, err
	}
	x := &cacheObserveSourcesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cache_ObserveSourcesClient interface {
	Recv() (*SourceList, error)
	grpc.ClientStream
}

type cacheObserveSourcesClient struct {
	grpc.ClientStream
}

func (x *cacheObserveSourcesClient) Recv() (*SourceList, error) {
	m := new(SourceList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cacheClient) ListBlobs(ctx context.Context, in *ListBlobsRequest, opts ...grpc.CallOption) (*BlobList, error) {
	out := new(BlobList)
	err := grpc.Invoke(ctx, "/scache.Cache/ListBlobs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) ObserveBlobs(ctx context.Context, in *ListBlobsRequest, opts ...grpc.CallOption) (Cache_ObserveBlobsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Cache_serviceDesc.Streams[1], c.cc, "/scache.Cache/ObserveBlobs", opts...)
	if err != nil {
		return nil, err
	}
	x := &cacheObserveBlobsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cache_ObserveBlobsClient interface {
	Recv() (*BlobList, error)
	grpc.ClientStream
}

type cacheObserveBlobsClient struct {
	grpc.ClientStream
}

func (x *cacheObserveBlobsClient) Recv() (*BlobList, error) {
	m := new(BlobList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Cache service

type CacheServer interface {
	AddSource(context.Context, *AddSourceRequest) (*AddSourceResponse, error)
	RemoveSource(context.Context, *RemoveSourceRequest) (*RemoveSourceResponse, error)
	ListSources(context.Context, *ListSourcesRequest) (*SourceList, error)
	ObserveSources(*ListSourcesRequest, Cache_ObserveSourcesServer) error
	ListBlobs(context.Context, *ListBlobsRequest) (*BlobList, error)
	ObserveBlobs(*ListBlobsRequest, Cache_ObserveBlobsServer) error
}

func RegisterCacheServer(s *grpc.Server, srv CacheServer) {
	s.RegisterService(&_Cache_serviceDesc, srv)
}

func _Cache_AddSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).AddSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scache.Cache/AddSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).AddSource(ctx, req.(*AddSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_RemoveSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).RemoveSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scache.Cache/RemoveSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).RemoveSource(ctx, req.(*RemoveSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_ListSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).ListSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scache.Cache/ListSources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).ListSources(ctx, req.(*ListSourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_ObserveSources_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListSourcesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CacheServer).ObserveSources(m, &cacheObserveSourcesServer{stream})
}

type Cache_ObserveSourcesServer interface {
	Send(*SourceList) error
	grpc.ServerStream
}

type cacheObserveSourcesServer struct {
	grpc.ServerStream
}

func (x *cacheObserveSourcesServer) Send(m *SourceList) error {
	return x.ServerStream.SendMsg(m)
}

func _Cache_ListBlobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBlobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).ListBlobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scache.Cache/ListBlobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).ListBlobs(ctx, req.(*ListBlobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_ObserveBlobs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListBlobsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CacheServer).ObserveBlobs(m, &cacheObserveBlobsServer{stream})
}

type Cache_ObserveBlobsServer interface {
	Send(*BlobList) error
	grpc.ServerStream
}

type cacheObserveBlobsServer struct {
	grpc.ServerStream
}

func (x *cacheObserveBlobsServer) Send(m *BlobList) error {
	return x.ServerStream.SendMsg(m)
}

var _Cache_serviceDesc = grpc.ServiceDesc{
	ServiceName: "scache.Cache",
	HandlerType: (*CacheServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSource",
			Handler:    _Cache_AddSource_Handler,
		},
		{
			MethodName: "RemoveSource",
			Handler:    _Cache_RemoveSource_Handler,
		},
		{
			MethodName: "ListSources",
			Handler:    _Cache_ListSources_Handler,
		},
		{
			MethodName: "ListBlobs",
			Handler:    _Cache_ListBlobs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ObserveSources",
			Handler:       _Cache_ObserveSources_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ObserveBlobs",
			Handler:       _Cache_ObserveBlobs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "scache/cache.proto",
}

func init() { proto.RegisterFile("scache/cache.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 477 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xdd, 0x8e, 0xd2, 0x40,
	0x14, 0xde, 0x0a, 0x56, 0x38, 0x20, 0xa9, 0x67, 0x8d, 0xd6, 0xaa, 0x91, 0x34, 0xd1, 0x70, 0x61,
	0x10, 0xf1, 0x4a, 0x8d, 0x1a, 0xd7, 0x75, 0x93, 0x8d, 0x1a, 0x93, 0x91, 0x2b, 0x6f, 0xc8, 0x16,
	0x46, 0x9d, 0x2c, 0x9d, 0xa9, 0x9d, 0xc1, 0x2c, 0xaf, 0xe2, 0xe3, 0xf8, 0x64, 0x66, 0xfe, 0x6a,
	0x61, 0x21, 0xd1, 0xf5, 0x06, 0xda, 0xf3, 0xfd, 0xcc, 0x37, 0xe7, 0x9c, 0x14, 0x50, 0xce, 0x4e,
	0x66, 0xdf, 0xe8, 0x23, 0xf3, 0x3b, 0x2c, 0x4a, 0xa1, 0x04, 0x86, 0xb6, 0x96, 0xec, 0x7b, 0x4c,
	0xe4, 0xb9, 0xe0, 0x16, 0x4c, 0x9f, 0x41, 0xf4, 0x7a, 0x3e, 0xff, 0x24, 0x96, 0xe5, 0x8c, 0x12,
	0xfa, 0x7d, 0x49, 0xa5, 0xc2, 0x07, 0x10, 0xca, 0x53, 0xc6, 0xf9, 0x2a, 0x0e, 0xfa, 0xc1, 0xa0,
	0x33, 0xee, 0x0d, 0xad, 0x72, 0xe8, 0x68, 0x0e, 0x4d, 0x9f, 0xc3, 0xb5, 0x9a, 0x56, 0x16, 0x82,
	0x4b, 0x6a, 0xc4, 0xa6, 0xb2, 0x53, 0x6c, 0xfe, 0xd3, 0x17, 0xb0, 0x4f, 0x68, 0x2e, 0x7e, 0xd0,
	0xf3, 0x67, 0xff, 0x8d, 0xfc, 0x06, 0x5c, 0x5f, 0x97, 0xdb, 0xe3, 0xd3, 0x5f, 0x01, 0x44, 0x47,
	0x6c, 0xa1, 0x68, 0xf9, 0xf6, 0xac, 0x28, 0xa9, 0x94, 0x4c, 0x70, 0x7c, 0x0c, 0x4d, 0x45, 0xcb,
	0x3c, 0x0e, 0xfa, 0x8d, 0x41, 0x67, 0x7c, 0xd7, 0x5b, 0x6e, 0xf2, 0x86, 0x13, 0x5a, 0xe6, 0xc4,
	0x50, 0xf1, 0x3e, 0xf4, 0xe8, 0x19, 0x93, 0x8a, 0xf1, 0xaf, 0x53, 0xa6, 0x68, 0x2e, 0xe3, 0x46,
	0x3f, 0x18, 0xb4, 0xc8, 0x55, 0x5f, 0x3d, 0xd6, 0xc5, 0x64, 0x02, 0x4d, 0x2d, 0xc2, 0x7b, 0xd0,
	0xb1, 0xc1, 0xa6, 0x6a, 0x55, 0xd8, 0xec, 0x6d, 0x02, 0xb6, 0x34, 0x59, 0x15, 0x14, 0x11, 0x9a,
	0x0b, 0xc6, 0x4f, 0xe3, 0x4b, 0x06, 0x31, 0xcf, 0x78, 0x13, 0xae, 0x64, 0x0b, 0x91, 0x4d, 0xd9,
	0xdc, 0x98, 0xb7, 0x49, 0xa8, 0x5f, 0x8f, 0xe7, 0xe9, 0x11, 0xe0, 0x7b, 0x26, 0x95, 0xbd, 0x9a,
	0xf4, 0xad, 0x19, 0x41, 0xf8, 0xc5, 0x24, 0x76, 0xad, 0x89, 0x77, 0xdd, 0x83, 0x38, 0x5e, 0x9a,
	0x01, 0x58, 0x0f, 0xed, 0xb6, 0xd6, 0xda, 0xc6, 0xee, 0xd6, 0xe2, 0x43, 0x68, 0xe5, 0x4b, 0x75,
	0xa2, 0x98, 0xe0, 0x26, 0x6e, 0x6f, 0x1c, 0x79, 0xe6, 0x07, 0x57, 0x27, 0x15, 0x23, 0x3d, 0x84,
	0x48, 0xbb, 0x1f, 0x2c, 0x44, 0xf6, 0x1f, 0x49, 0x3f, 0x43, 0x4b, 0x3b, 0x98, 0x9c, 0x7d, 0x68,
	0xea, 0x3e, 0xb8, 0x94, 0x5d, 0xaf, 0xd5, 0x38, 0x31, 0xc8, 0xbf, 0x25, 0x1c, 0xff, 0x6c, 0xc0,
	0xe5, 0x37, 0x1a, 0xc4, 0x03, 0x68, 0x57, 0x0b, 0x8b, 0x55, 0xa8, 0xcd, 0xfd, 0x4f, 0x6e, 0x6d,
	0x41, 0xdc, 0x7a, 0xed, 0xe1, 0x3b, 0xe8, 0xd6, 0x17, 0x0f, 0x6f, 0x7b, 0xf2, 0x96, 0x6d, 0x4e,
	0xee, 0x6c, 0x07, 0x2b, 0xb3, 0x57, 0xd0, 0xa9, 0x0d, 0x1a, 0x13, 0x4f, 0x3f, 0x3f, 0xfd, 0x04,
	0xd7, 0xa7, 0xa5, 0x19, 0xe9, 0x1e, 0x1e, 0x42, 0xef, 0x63, 0x26, 0x69, 0xe9, 0xbd, 0x2f, 0xe0,
	0x31, 0x0a, 0xf0, 0x29, 0xb4, 0xab, 0x19, 0xfe, 0xe9, 0xcb, 0xe6, 0x58, 0x93, 0xa8, 0x3e, 0x0a,
	0x17, 0xe0, 0x25, 0x74, 0x5d, 0x80, 0x0b, 0xa8, 0x47, 0x41, 0x16, 0x9a, 0xcf, 0xd0, 0x93, 0xdf,
	0x01, 0x00, 0x00, 0xff, 0xff, 0xe0, 0x67, 0x83, 0x16, 0xb9, 0x04, 0x00, 0x00,
}
